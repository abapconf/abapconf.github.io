{"version":3,"file":"Component-preload.js","sections":[{"offset":{"line":1,"column":0},"map":{"version":3,"names":[],"sources":["Component-preload.js?bundle-code-0"],"mappings":"AAAA;AACA","sourcesContent":["sap.ui.require.preload({\n"],"sourceRoot":""}},{"offset":{"line":3,"column":0},"map":{"version":3,"file":"Component.js","names":["models","_interopRequireDefault","__models","Component","UIComponent","extend","metadata","manifest","init","_init","UIComponent.prototype.init.call","this","setModel","createDeviceModel","getRouter","initialize","getContentDensityClass","_getContentDensityClass","contentDensityClass","undefined","document","body","classList","contains","Device","support","touch"],"sources":["Component.ts"],"sourcesContent":["import UIComponent from \"sap/ui/core/UIComponent\";\nimport models from \"./model/models\";\nimport Device from \"sap/ui/Device\";\n\n/**\n * @namespace org.abapconf.legends\n */\nexport default class Component extends UIComponent {\n\tpublic static metadata = {\n\t\tmanifest: \"json\",\n\t};\n\n\tprivate contentDensityClass: string;\n\n\tpublic init(): void {\n\t\t// call the base component's init function\n\t\tsuper.init();\n\n\t\t// create the device model\n\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\n\t\t// create the views based on the url/hash\n\t\tthis.getRouter().initialize();\n\t}\n\n\t/**\n\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t * design mode class should be set, which influences the size appearance of some controls.\n\t * @public\n\t * @returns css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t */\n\tpublic getContentDensityClass(): string {\n\t\tif (this.contentDensityClass === undefined) {\n\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\tif (document.body.classList.contains(\"sapUiSizeCozy\") || document.body.classList.contains(\"sapUiSizeCompact\")) {\n\t\t\t\tthis.contentDensityClass = \"\";\n\t\t\t} else if (!Device.support.touch) {\n\t\t\t\t// apply \"compact\" mode if touch is not supported\n\t\t\t\tthis.contentDensityClass = \"sapUiSizeCompact\";\n\t\t\t} else {\n\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\tthis.contentDensityClass = \"sapUiSizeCozy\";\n\t\t\t}\n\t\t}\n\t\treturn this.contentDensityClass;\n\t}\n}\n"],"mappings":"AAAA,4MACOA,EAAMC,EAAAC,GAGb,MAGqBC,EAAkBC,EAAWC,OAAA,kCACnCC,SAAW,CACxBC,SAAU,QAKJC,KAAI,SAAAC,IAEVC,sBAAAC,MAGAA,KAAKC,SAASZ,EAAOa,oBAAqB,UAG1CF,KAAKG,YAAYC,YAClB,EAQOC,uBAAsB,SAAAC,IAC5B,GAAIN,KAAKO,sBAAwBC,UAAW,CAE3C,GAAIC,SAASC,KAAKC,UAAUC,SAAS,kBAAoBH,SAASC,KAAKC,UAAUC,SAAS,oBAAqB,CAC9GZ,KAAKO,oBAAsB,EAC5B,MAAO,IAAKM,EAAOC,QAAQC,MAAO,CAEjCf,KAAKO,oBAAsB,kBAC5B,KAAO,CAENP,KAAKO,oBAAsB,eAC5B,CACD,CACA,OAAOP,KAAKO,mBACb,IAAC,OAtCmBf,CAAS","ignoreList":[],"sourceRoot":""}},{"offset":{"line":6,"column":0},"map":{"version":3,"file":"App.controller.js","names":["BaseController","_interopRequireDefault","__BaseController","App","extend","onInit","_onInit","this","getView","addStyleClass","getOwnerComponent","getContentDensityClass"],"sources":["App.controller.ts"],"sourcesContent":["import BaseController from \"./BaseController\";\n\n/**\n * @namespace org.abapconf.legends.controller\n */\nexport default class App extends BaseController {\n\tpublic onInit(): void {\n\t\t// apply content density mode to root view\n\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t}\n}\n"],"mappings":"AAAA,gKAAOA,EAAcC,EAAAC,GAErB,MAGqBC,EAAYH,EAAcI,OAAA,uCACvCC,OAAM,SAAAC,IAEZC,KAAKC,UAAUC,cAAcF,KAAKG,oBAAoBC,yBACvD,IAAC,OAJmBR,CAAG","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":9,"column":0},"map":{"version":3,"file":"BaseController.js","names":["BaseController","Controller","extend","getOwnerComponent","_getOwnerComponent","Controller.prototype.getOwnerComponent.call","this","getRouter","_getRouter","UIComponent","getRouterFor","getResourceBundle","_getResourceBundle","oModel","getModel","_getModel","sName","getView","setModel","_setModel","navTo","_navTo","oParameters","bReplace","undefined","onNavBack","_onNavBack","sPreviousHash","History","getInstance","getPreviousHash","window","history","go","geti18nModel","_geti18nModel","view","model","bundle"],"sources":["BaseController.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\nimport UIComponent from \"sap/ui/core/UIComponent\";\nimport AppComponent from \"../Component\";\nimport Model from \"sap/ui/model/Model\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Router from \"sap/ui/core/routing/Router\";\nimport History from \"sap/ui/core/routing/History\";\n\n/**\n * @namespace org.abapconf.legends.controller\n */\nexport default abstract class BaseController extends Controller {\n\t/**\n\t * Convenience method for accessing the component of the controller's view.\n\t * @returns The component of the controller's view\n\t */\n\tpublic getOwnerComponent(): AppComponent {\n\t\treturn super.getOwnerComponent() as AppComponent;\n\t}\n\n\t/**\n\t * Convenience method to get the components' router instance.\n\t * @returns The router instance\n\t */\n\tpublic getRouter(): Router {\n\t\treturn UIComponent.getRouterFor(this);\n\t}\n\n\t/**\n\t * Convenience method for getting the i18n resource bundle of the component.\n\t * @returns The i18n resource bundle of the component\n\t */\n\tpublic getResourceBundle(): ResourceBundle | Promise<ResourceBundle> {\n\t\tconst oModel = this.getOwnerComponent().getModel(\"i18n\") as ResourceModel;\n\t\treturn oModel.getResourceBundle();\n\t}\n\n\t/**\n\t * Convenience method for getting the view model by name in every controller of the application.\n\t * @param [sName] The model name\n\t * @returns The model instance\n\t */\n\tpublic getModel(sName?: string): Model {\n\t\treturn this.getView().getModel(sName);\n\t}\n\n\t/**\n\t * Convenience method for setting the view model in every controller of the application.\n\t * @param oModel The model instance\n\t * @param [sName] The model name\n\t * @returns The current base controller instance\n\t */\n\tpublic setModel(oModel: Model, sName?: string): BaseController {\n\t\tthis.getView().setModel(oModel, sName);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Convenience method for triggering the navigation to a specific target.\n\t * @public\n\t * @param sName Target name\n\t * @param [oParameters] Navigation parameters\n\t * @param [bReplace] Defines if the hash should be replaced (no browser history entry) or set (browser history entry)\n\t */\n\tpublic navTo(sName: string, oParameters?: object, bReplace?: boolean): void {\n\t\tthis.getRouter().navTo(sName, oParameters, undefined, bReplace);\n\t}\n\n\t/**\n\t * Convenience event handler for navigating back.\n\t * It there is a history entry we go one step back in the browser history\n\t * If not, it will replace the current entry of the browser history with the main route.\n\t */\n\tpublic onNavBack(): void {\n\t\tconst sPreviousHash = History.getInstance().getPreviousHash();\n\t\tif (sPreviousHash !== undefined) {\n\t\t\twindow.history.go(-1);\n\t\t} else {\n\t\t\tthis.getRouter().navTo(\"main\", {}, undefined, true);\n\t\t}\n\t}\n\n\t/**\n\t * Convience access to the i18n model\n\t * @returns i18n model\n\t */\n\tpublic geti18nModel(): ResourceBundle {\n\t\t//const bundle = this.getView().getModel(\"i18n\").getResourceBundle() as ResourceBundle;\n\n\t\tconst view = this.getView();\n\t\tconst model = view.getModel(\"i18n\") as ResourceModel;\n\t\tconst bundle = model.getResourceBundle() as ResourceBundle;\n\t\t\n\t\treturn bundle;\n\t}\n}\n"],"mappings":"AAAA,+IASA,MAG8BA,EAAuBC,EAAUC,OAAA,kDAKvDC,kBAAiB,SAAAC,IACvB,OAAAC,mCAAAC,KACD,EAMOC,UAAS,SAAAC,IACf,OAAOC,EAAYC,aAAaJ,KACjC,EAMOK,kBAAiB,SAAAC,IACvB,MAAMC,EAASP,KAAKH,oBAAoBW,SAAS,QACjD,OAAOD,EAAOF,mBACf,EAOOG,SAAQ,SAAAC,EAACC,GACf,OAAOV,KAAKW,UAAUH,SAASE,EAChC,EAQOE,SAAQ,SAAAC,EAACN,EAAeG,GAC9BV,KAAKW,UAAUC,SAASL,EAAQG,GAChC,OAAOV,IACR,EASOc,MAAK,SAAAC,EAACL,EAAeM,EAAsBC,GACjDjB,KAAKC,YAAYa,MAAMJ,EAAOM,EAAaE,UAAWD,EACvD,EAOOE,UAAS,SAAAC,IACf,MAAMC,EAAgBC,EAAQC,cAAcC,kBAC5C,GAAIH,IAAkBH,UAAW,CAChCO,OAAOC,QAAQC,IAAI,EACpB,KAAO,CACN3B,KAAKC,YAAYa,MAAM,OAAQ,CAAC,EAAGI,UAAW,KAC/C,CACD,EAMOU,aAAY,SAAAC,IAGlB,MAAMC,EAAO9B,KAAKW,UAClB,MAAMoB,EAAQD,EAAKtB,SAAS,QAC5B,MAAMwB,EAASD,EAAM1B,oBAErB,OAAO2B,CACR,IAAC,OAnF4BtC,CAAc","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":12,"column":0},"map":{"version":3,"file":"Main.controller.js","names":["BaseController","_interopRequireDefault","__BaseController","Main","extend","openSpeakerDetail","async","_openSpeakerDetail","event","control","getSource","ctx","getBindingContext","path","getPath","this","dialog","loadFragment","name","bindElement","open","onCloseDialog","_onCloseDialog","byId","close","getEventName","_getEventName","eventid","bundle","geti18nModel","eventName","getText","key","settings","title","uppercase","GroupHeaderListItem","doFilterByABAPConf","_doFilterByABAPConf","binding","getBinding","filter","createFilter","_createFilter","console","log","Filter","test","aValue","result","item","length"],"sources":["Main.controller.ts"],"sourcesContent":["import Event from \"sap/ui/base/Event\";\nimport BaseController from \"./BaseController\";\nimport Dialog from \"sap/m/Dialog\";\nimport GroupHeaderListItem, { $GroupHeaderListItemSettings } from \"sap/m/GroupHeaderListItem\";\nimport Filter from \"sap/ui/model/Filter\";\nimport Context from \"sap/ui/model/Context\";\nimport Control from \"sap/ui/core/Control\";\nimport Binding from \"sap/ui/model/Binding\";\n\ninterface groupHeaderEvent {\n    key: string;\n}\n\n/**\n * @namespace org.abapconf.legends.controller\n */\nexport default class Main extends BaseController {\n\n\tprivate dialog : Dialog;\n    \n    \n\n\tasync openSpeakerDetail(event: Event): Promise<void> {\n\n        // get path to clicked speaker\n        const control: Control = event.getSource();\n        const ctx: Context = control.getBindingContext();\n        const path = ctx.getPath();\n\n        //const path: string = event.getSource().getBindingContext().getPath() as string;\n\n\t\t// load fragment if not already done\n        this.dialog ??= await <Promise<Dialog>> this.loadFragment({\n             name: \"org.abapconf.legends.view.fragment.SpeakerDialog\",\n        });\n\n        // bind to speaker\n\t\tthis.dialog.bindElement(path);\n\n        this.dialog.open();\n    }\n\n\tonCloseDialog(): void {\n        // note: We don't need to chain to the pDialog promise, since this event-handler\n        // is only called from within the loaded dialog itself.\n        (<Dialog> this.byId(\"speakerDialog\"))?.close();\n    }\n\n    /**\n     * Format the provided event name from the speakers model into a human readable text\n     * @param eventid \n     * @returns \n     */\n    getEventName(eventid: groupHeaderEvent): GroupHeaderListItem {\n\n        // use event id to get text from i18n\n        const bundle = this.geti18nModel();\n        const eventName: string = bundle.getText(eventid.key);\n\n        // build group header with name from i18n\n        const settings = {\n            title: eventName,\n            uppercase: false\n        } as $GroupHeaderListItemSettings;\n\n        return new GroupHeaderListItem(\n            settings\n        );\n    }\n\n    /**\n     * Filter grid by event\n     * @param event \n     */\n    doFilterByABAPConf(event: string): void {\n        const control: Control = this.byId(\"gridSpeakers\") as Control;\n        const binding: Binding = control.getBinding(\"content\");\n\n        if (event === \"all\") {\n            binding.filter([]);\n        } else {\n            const filter: Filter = this.createFilter(event);\n            binding.filter([filter]);\n        }\n        \n    }\n\n    /**\n     * Create filter based on event\n     * @param event \n     * @returns \n     */\n    private createFilter(event: string): Filter {\n        console.log(\"createFilter for %s\", event);\n        \n        const filter = new Filter(\n            {\n                path: 'events',\n                test: function(aValue: string[]) {\n                    const result: string[] = aValue.filter( (item) => item === event);\n                    return result.length > 0 ? true : false;\n                }\n            });\n        return filter;\n    }\n    \n\n\n}\n"],"mappings":"AAAA,sNACOA,EAAcC,EAAAC,GAYrB,MAGqBC,EAAaH,EAAcI,OAAA,wCAMzCC,kBAAiBC,eAAAC,EAACC,GAGjB,MAAMC,EAAmBD,EAAME,YAC/B,MAAMC,EAAeF,EAAQG,oBAC7B,MAAMC,EAAOF,EAAIG,UAKjBC,KAAKC,eAAmCD,KAAKE,aAAa,CACrDC,KAAM,qDAIjBH,KAAKC,OAAOG,YAAYN,GAElBE,KAAKC,OAAOI,MAChB,EAEHC,cAAa,SAAAC,IAGIP,KAAKQ,KAAK,kBAAmBC,OAC3C,EAOAC,aAAY,SAAAC,EAACC,GAGT,MAAMC,EAASb,KAAKc,eACpB,MAAMC,EAAoBF,EAAOG,QAAQJ,EAAQK,KAGjD,MAAMC,EAAW,CACbC,MAAOJ,EACPK,UAAW,OAGf,OAAO,IAAIC,EACPH,EAER,EAMAI,mBAAkB,SAAAC,EAAC9B,GACf,MAAMC,EAAmBM,KAAKQ,KAAK,gBACnC,MAAMgB,EAAmB9B,EAAQ+B,WAAW,WAE5C,GAAIhC,IAAU,MAAO,CACjB+B,EAAQE,OAAO,GACnB,KAAO,CACH,MAAMA,EAAiB1B,KAAK2B,aAAalC,GACzC+B,EAAQE,OAAO,CAACA,GACpB,CAEJ,EAOQC,aAAY,SAAAC,EAACnC,GACjBoC,QAAQC,IAAI,sBAAuBrC,GAEnC,MAAMiC,EAAS,IAAIK,EACf,CACIjC,KAAM,SACNkC,KAAM,SAASC,GACX,MAAMC,EAAmBD,EAAOP,OAASS,GAASA,IAAS1C,GAC3D,OAAOyC,EAAOE,OAAS,EAAI,KAAO,KACtC,IAER,OAAOV,CACX,IAAC,OAxFgBtC,CAAI","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":19,"column":0},"map":{"version":3,"file":"formatter.js","names":["eventCounter","value","length","__exports"],"sources":["formatter.ts"],"sourcesContent":["import GroupHeaderListItem from \"sap/m/GroupHeaderListItem\";\n\nexport default {\n\teventCounter: (value: string[]): int => {\n\t\treturn value.length;\n\t},\n\n};\n"],"mappings":"AAAA,4DAEe,CACdA,aAAeC,GACPA,EAAMC,QAGd,OAAAC,CAAA","ignoreList":[],"sourceRoot":"model"}},{"offset":{"line":22,"column":0},"map":{"version":3,"file":"models.js","names":["createDeviceModel","oModel","JSONModel","Device","setDefaultBindingMode","BindingMode","OneWay","__exports"],"sources":["models.ts"],"sourcesContent":["import JSONModel from \"sap/ui/model/json/JSONModel\";\nimport BindingMode from \"sap/ui/model/BindingMode\";\nimport Device from \"sap/ui/Device\";\n\n\nexport default {\n\tcreateDeviceModel: () => {\n\t\tconst oModel = new JSONModel(Device);\n\t\toModel.setDefaultBindingMode(BindingMode.OneWay);\n\t\treturn oModel;\n\t}\n};\n"],"mappings":"AAAA,yIAKe,CACdA,kBAAmBA,KAClB,MAAMC,EAAS,IAAIC,EAAUC,GAC7BF,EAAOG,sBAAsBC,EAAYC,QACzC,OAAOL,CAAM,GAEd,OAAAM,CAAA","ignoreList":[],"sourceRoot":"model"}}]}