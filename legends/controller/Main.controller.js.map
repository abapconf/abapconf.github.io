{"version":3,"file":"Main.controller.js","names":["BaseController","_interopRequireDefault","__BaseController","Main","extend","openSpeakerDetail","async","_openSpeakerDetail","event","control","getSource","ctx","getBindingContext","path","getPath","this","dialog","loadFragment","name","bindElement","open","onCloseDialog","_onCloseDialog","byId","close","getEventName","_getEventName","eventid","bundle","geti18nModel","eventName","getText","key","settings","title","uppercase","GroupHeaderListItem","doFilterByABAPConf","_doFilterByABAPConf","binding","getBinding","filter","createFilter","_createFilter","console","log","Filter","test","aValue","result","item","length"],"sources":["Main.controller.ts"],"sourcesContent":["import Event from \"sap/ui/base/Event\";\nimport BaseController from \"./BaseController\";\nimport Dialog from \"sap/m/Dialog\";\nimport GroupHeaderListItem, { $GroupHeaderListItemSettings } from \"sap/m/GroupHeaderListItem\";\nimport Filter from \"sap/ui/model/Filter\";\nimport Context from \"sap/ui/model/Context\";\nimport Control from \"sap/ui/core/Control\";\nimport Binding from \"sap/ui/model/Binding\";\n\ninterface groupHeaderEvent {\n    key: string;\n}\n\n/**\n * @namespace org.abapconf.legends.controller\n */\nexport default class Main extends BaseController {\n\n\tprivate dialog : Dialog;\n    \n    \n\n\tasync openSpeakerDetail(event: Event): Promise<void> {\n\n        // get path to clicked speaker\n        const control: Control = event.getSource();\n        const ctx: Context = control.getBindingContext();\n        const path = ctx.getPath();\n\n        //const path: string = event.getSource().getBindingContext().getPath() as string;\n\n\t\t// load fragment if not already done\n        this.dialog ??= await <Promise<Dialog>> this.loadFragment({\n             name: \"org.abapconf.legends.view.fragment.SpeakerDialog\",\n        });\n\n        // bind to speaker\n\t\tthis.dialog.bindElement(path);\n\n        this.dialog.open();\n    }\n\n\tonCloseDialog(): void {\n        // note: We don't need to chain to the pDialog promise, since this event-handler\n        // is only called from within the loaded dialog itself.\n        (<Dialog> this.byId(\"speakerDialog\"))?.close();\n    }\n\n    /**\n     * Format the provided event name from the speakers model into a human readable text\n     * @param eventid \n     * @returns \n     */\n    getEventName(eventid: groupHeaderEvent): GroupHeaderListItem {\n\n        // use event id to get text from i18n\n        const bundle = this.geti18nModel();\n        const eventName: string = bundle.getText(eventid.key);\n\n        // build group header with name from i18n\n        const settings = {\n            title: eventName,\n            uppercase: false\n        } as $GroupHeaderListItemSettings;\n\n        return new GroupHeaderListItem(\n            settings\n        );\n    }\n\n    /**\n     * Filter grid by event\n     * @param event \n     */\n    doFilterByABAPConf(event: string): void {\n        const control: Control = this.byId(\"gridSpeakers\") as Control;\n        const binding: Binding = control.getBinding(\"content\");\n\n        if (event === \"all\") {\n            binding.filter([]);\n        } else {\n            const filter: Filter = this.createFilter(event);\n            binding.filter([filter]);\n        }\n        \n    }\n\n    /**\n     * Create filter based on event\n     * @param event \n     * @returns \n     */\n    private createFilter(event: string): Filter {\n        console.log(\"createFilter for %s\", event);\n        \n        const filter = new Filter(\n            {\n                path: 'events',\n                test: function(aValue: string[]) {\n                    const result: string[] = aValue.filter( (item) => item === event);\n                    return result.length > 0 ? true : false;\n                }\n            });\n        return filter;\n    }\n    \n\n\n}\n"],"mappings":"sNACOA,EAAcC,EAAAC,GAYrB,MAGqBC,EAAaH,EAAcI,OAAA,wCAMzCC,kBAAiBC,eAAAC,EAACC,GAGjB,MAAMC,EAAmBD,EAAME,YAC/B,MAAMC,EAAeF,EAAQG,oBAC7B,MAAMC,EAAOF,EAAIG,UAKjBC,KAAKC,eAAmCD,KAAKE,aAAa,CACrDC,KAAM,qDAIjBH,KAAKC,OAAOG,YAAYN,GAElBE,KAAKC,OAAOI,MAChB,EAEHC,cAAa,SAAAC,IAGIP,KAAKQ,KAAK,kBAAmBC,OAC3C,EAOAC,aAAY,SAAAC,EAACC,GAGT,MAAMC,EAASb,KAAKc,eACpB,MAAMC,EAAoBF,EAAOG,QAAQJ,EAAQK,KAGjD,MAAMC,EAAW,CACbC,MAAOJ,EACPK,UAAW,OAGf,OAAO,IAAIC,EACPH,EAER,EAMAI,mBAAkB,SAAAC,EAAC9B,GACf,MAAMC,EAAmBM,KAAKQ,KAAK,gBACnC,MAAMgB,EAAmB9B,EAAQ+B,WAAW,WAE5C,GAAIhC,IAAU,MAAO,CACjB+B,EAAQE,OAAO,GACnB,KAAO,CACH,MAAMA,EAAiB1B,KAAK2B,aAAalC,GACzC+B,EAAQE,OAAO,CAACA,GACpB,CAEJ,EAOQC,aAAY,SAAAC,EAACnC,GACjBoC,QAAQC,IAAI,sBAAuBrC,GAEnC,MAAMiC,EAAS,IAAIK,EACf,CACIjC,KAAM,SACNkC,KAAM,SAASC,GACX,MAAMC,EAAmBD,EAAOP,OAASS,GAASA,IAAS1C,GAC3D,OAAOyC,EAAOE,OAAS,EAAI,KAAO,KACtC,IAER,OAAOV,CACX,IAAC,OAxFgBtC,CAAI","ignoreList":[]}